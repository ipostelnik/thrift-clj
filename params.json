{"name":"thrift-clj","tagline":"Thrift and Clojure!","body":"## Using Thrift from Clojure as if it was Clojure!\r\n\r\n[Apache Thrift](http://thrift.apache.org/) is an awesome (and terribly documented) framework for server/client interaction. It let's you define types and service functions, creates whole servers and the respective clients in the blink of an eye. However, there currently is no Thrift IDL to Clojure compiler available.\r\n\r\n__thrift-clj__ fills this gap by loading the Java classes generated by the Thrift compiler, making them accessible using plain-and-simple Clojure records and functions.\r\n\r\n## Use it!\r\n\r\n__Leiningen__\r\n\r\n```clojure\r\n[thrift-clj \"0.2.0\"]\r\n```\r\n\r\n__Clojure__\r\n\r\n```clojure\r\n(require '[thrift-clj.core :as thrift])\r\n```\r\n\r\n### Types\r\n\r\n```clojure\r\n(thrift/import \r\n  (:types [test.types Point]))\r\n\r\n(def p (Point. 0 0))\r\n(println \"Point:\" (str \"(\" (:x p) \",\" (:y p) \")\"))\r\n```\r\n\r\n### Clients\r\n\r\n```clojure\r\n(thrift/import\r\n  (:types [test.types Point])\r\n  (:clients [test.service.Painter :as P]))\r\n\r\n(with-open [c (thrift/connect! P \"localhost:1234\" :protocol :json)]\r\n  (P/drawCircle c (Point. 10 10) 5))\r\n```\r\n\r\n### Services\r\n\r\n```clojure\r\n(thrift/import\r\n  (:services [test.service.Painter :as P]))\r\n\r\n(thrift/defservice painter P\r\n  (drawCircle [{:keys[x y]} radius]\r\n    ...)\r\n  (drawSquare [{:keys[x y]} edge]\r\n    ...)\r\n  ...)\r\n\r\n(thrift/serve-and-block!\r\n  (thrift/multi-threaded-server painter 1234 :protocol :json))\r\n```\r\n\r\nHave a look at the [Wiki](https://github.com/xsc/thrift-clj/wiki) for detailed usage instructions.\r\n\r\n## Automatic Thrift Compilation\r\n\r\nIf you want to have your Thrift IDL files compiled to Java automatically, have a look at [lein-thriftc](https://github.com/xsc/lein-thriftc)!","google":"UA-43025585-1","note":"Don't delete this file! It's used internally to help with page regeneration."}